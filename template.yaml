AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  twilioIVR

  SAM Template for TwilioIVR

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    # Default timeout for all Lambda functions set to 30s
    Tracing: Active
  Api:
    TracingEnabled: True

Resources:
  FnIVRUpdate:
    # This function receives a call from Google Sheets and stores it in DynamoDB
    # ** Future version idea: Remove Lambda and have the API Gateway store by direct DynamoDB integration
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ivrupdate/
      Handler: ivrup.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
        # ** Future version:  Test and deploy ARM architecture to for cost optimization.
        # Unlikely this app will rise to $0.01/mo for some time even on x86_64, so not a priority
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: payment
          LOG_LEVEL: INFO
          DYNAMO_TABLE: !Ref DynamoDBTable  # Get the created DynamoDB table at deploy-time
      Layers:
        # Lambda Powertools layer.
        # Find the latest Layer version in the official documentation
        # https://awslabs.github.io/aws-lambda-powertools-python/latest/#lambda-layer
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:21
      Events:
        HelloWorld:
          # REST API Gateway
          Type: Api
          Properties:
            Path: /ivrUpdate
            Method: post
            RestApiId:
              Ref: ApiGatewayApi
      Policies:
      # Give the Lambda service access to poll your DynamoDB Stream
      # Should reduce access to just the table involved for "least privilege" principle
      - AmazonDynamoDBFullAccess            

  FnIVRCallResponse:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ivrcall/
      Handler: ivrcall.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: payment
          LOG_LEVEL: INFO
          DYNAMO_TABLE: !Ref DynamoDBTable
          URL: !Join
                  - ""
                  - - !ImportValue IVRURL
                    - /ivrForward/
          

      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:21
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /ivrCall
            Method: post
            RestApiId:
              Ref: ApiGatewayApi
      Policies:
      # Give the Lambda service access to poll your DynamoDB Stream
      # Should be read access
      - AmazonDynamoDBFullAccess            

  FnIVRForward:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ivrforward/
      Handler: ivrfwd.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: payment
          LOG_LEVEL: INFO
          DYNAMO_TABLE: !Ref DynamoDBTable
          URL: !Join
                  - ""
                  - - !ImportValue IVRURL
                    - /ivrCall

      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:21
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /ivrForward
            Method: post
            RestApiId:
              Ref: ApiGatewayApi
      Policies:
      # Give the Lambda service access to poll your DynamoDB Stream
      # Should be read only
      - AmazonDynamoDBFullAccess            

  DynamoDBTable:
    # Create a simple DynamoDB table. It only has 1 row and two columns
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ApiGatewayApi:
    # Create 1 APIGW to be shared by all Lambda functions using different paths/verbs
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod      


Outputs:
  # Need the API endpoint URL to pass into Lambdas
  # Caused a circular reference error when I tried to do it normally, so doing it as a CF Export and then !ImportValue works
  # This approach will likely cause an error on first deployment on a new account. If so, comment all by the ApiGatewayApi resource and deploy
  # Then deploy a second time with the rest of the resources un-commented
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
    Export: 
      Name: IVRURL

